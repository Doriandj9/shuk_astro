---
export const prerender = false;
import { api, app } from "@/config/app";
import { webRoutes } from "@/config/webRoutes";
import { appLoadImage } from "@/modules/core/utilities/img/convert";
import { decode } from "entities";
import type { PostData } from "@/modules/web/hooks/post/PostI";
import { PostWrapper } from "@/wrapers/PostWrapper";
import BaseLayout from "@/layouts/BaseLayout.astro";
const { id } = Astro.params;

let errorApi: null | Error = null;
let post: PostData | null = null;
const token = Astro.cookies.get('token');

try {
  const response = await api.get(`post/${id}`, {
    headers: {
      Authorization: `Bearer ${token ? atob(token.value) : token}`,
    },
  });

  const data: { status: boolean; message: "OK"; data: PostData } =
    await response.data;
  post = data.data;
} catch (error) {
  if (
    typeof error === "object" &&
    error &&
    Reflect.has(error, "name") &&
    Reflect.has(error, "message")
  ) {
    errorApi = {
      name: Reflect.get(error, "name") || "Server",
      message: Reflect.get(error, "message") || "Not found",
    };
  } else {
    errorApi = {
      name: "Server",
      message: "Not found",
    };
  }
}

const serializeText = (text: string): string => {
  const result = decode(
    text
      .replaceAll(/<br>/g, "\n\r")
      .replaceAll(/(<)(\w+)(>)/g, "")
      .replaceAll(/(<\/)(\w+)(>)/g, ""),
  );
  return result;
};

const metaTags = [
  {
    property: "og:url",
    content: `${app.host}${webRoutes.view_posts.path.replace(":id", String(post?.id))}`,
  },
  {
    property: "og:type",
    content: "article",
  },
  {
    property: "og:title",
    content: `${serializeText(post?.description || post?.title || "")}`,
  },
  {
    property: "og:description",
    content: `${serializeText(post?.description || post?.title || "")}`,
  },
  {
    property: "og:image",
    content: `${appLoadImage(post?.img?.path || "")}`,
  },
  {
    property: "og:image:alt",
    content: `${serializeText(post?.description ?? "")}`,
  },
  {
    property: "fb:app_id",
    content: `${app.oAuthIdFacebook}`,
  },
];
---

<BaseLayout title={serializeText(post?.description ?? "")} metadata={metaTags}>
  <PostWrapper client:only="react" id={id ? String(id) : null} />
</BaseLayout>
